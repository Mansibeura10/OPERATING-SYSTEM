#include <stdio.h>


struct Process {
    int pid; 
    int burst_time; 
};


void findWaitingTime(struct Process proc[], int n, int wt[]) {
    int remaining_time[n];
    int i;
    int INT_MAX;
    for ( i = 0; i < n; i++) {
        remaining_time[i] = proc[i].burst_time;
    }

    int complete = 0, t = 0, shortest = 0;
    
    int min_val = INT_MAX;
    int check = 0;
    int j;
    
    while (complete != n) {
        for (j = 0; j < n; j++) {
            if (proc[j].burst_time <= t && remaining_time[j] < min_val && remaining_time[j] > 0) {
                min_val = remaining_time[j];
                shortest = j;
                check = 1;
            }
        }

        if (check == 0) {
            t++;
            continue;
        }
        remaining_time[shortest]--;
        min_val = remaining_time[shortest];
        if (min_val == 0) {
            min_val = INT_MAX;
        }

        
        if (remaining_time[shortest] == 0) {
            complete++;
            check = 0;

           
            wt[shortest] = t + 1 - proc[shortest].burst_time;

            if (wt[shortest] < 0) {
                wt[shortest] = 0;
            }
        }

        
        t++;
    }
}
void findTurnAroundTime(struct Process proc[], int n, int wt[], int tat[]) {
	int i;
    for ( i = 0; i < n; i++) {
        tat[i] = proc[i].burst_time + wt[i];
    }
}

void findAverageTime(struct Process proc[], int n) {
    int wt[n], tat[n];
    int i;
    findWaitingTime(proc, n, wt);

    
    findTurnAroundTime(proc, n, wt, tat);

    int total_wt = 0, total_tat = 0;

    
    for ( i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }

   
    float average_wt = (float)total_wt / n;
    float average_tat = (float)total_tat / n;

   
    printf("Average Waiting Time: %.2f\n", average_wt);
    printf("Average Turnaround Time: %.2f\n", average_tat);
}


int main() {
    int n;
    struct Process proc[] = { {1, 6}, {2, 8}, {3, 7}, {4, 3} };
    n = sizeof(proc) / sizeof(proc[0]);

    
    findAverageTime(proc, n);

    return 0;
}

#include <stdio.h>

// Structure to represent a process
struct Process {
    int pid; // Process ID
    int burst_time; // Burst time
    int remaining_time; // Remaining burst time
};


void findWaitingTimeRR(struct Process proc[], int n, int quantum, int wt[]) {
    int remaining_burst[n];
    int i;
    for ( i = 0; i < n; i++) {
        remaining_burst[i] = proc[i].burst_time;
    }

    int t = 0; // Current time
    while (1) {
        int done = 1; 
int i;
        // Traverse all processes
        for ( i = 0; i < n; i++) {
         
            if (remaining_burst[i] > 0) {
                done = 0; // At least one process is not done yet

               
                if (remaining_burst[i] > quantum) {
                    t += quantum;
                    remaining_burst[i] -= quantum;
                } else {
                    
                    t += remaining_burst[i];
                    wt[i] = t - proc[i].burst_time;
                    remaining_burst[i] = 0;
                }
            }
        }

      
        if (done == 1) {
            break;
        }
    }
}


void findTurnAroundTime(struct Process proc[], int n, int wt[], int tat[]) {
	int i;
    for ( i = 0; i < n; i++) {
        tat[i] = proc[i].burst_time + wt[i];
    }
}


void findAverageTime(struct Process proc[], int n, int quantum) {
    int wt[n], tat[n];

    
    findWaitingTimeRR(proc, n, quantum, wt);

    
    findTurnAroundTime(proc, n, wt, tat);

    int total_wt = 0, total_tat = 0;
int i;
  
    for ( i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }

   
    float average_wt = (float)total_wt / n;
    float average_tat = (float)total_tat / n;

    
    printf("Average Waiting Time: %.2f\n", average_wt);
    printf("Average Turnaround Time: %.2f\n", average_tat);
}

int main() {
   
    struct Process proc[] = { {1, 24, 24}, {2, 3, 3}, {3, 3, 3} };
    int n = sizeof(proc) / sizeof(proc[0]);

    int quantum = 4;

  
    findAverageTime(proc, n, quantum);

    return 0;
}

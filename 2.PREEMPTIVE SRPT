#include <stdio.h>
#include <stdbool.h>


struct Process {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
};


void findWaitingTime(struct Process proc[], int n, int wt[]) {
    int remaining_time[n];
    int i,j,_INT_MAX_;
    
    for ( i = 0; i < n; i++) {
        remaining_time[i] = proc[i].burst_time;
    }

    int complete = 0, t = 0, shortest = -1;
    int min_val = _INT_MAX_;
    bool check = false;

  
    while (complete != n) {
        for ( j = 0; j < n; j++) {
            if (proc[j].arrival_time <= t && remaining_time[j] < min_val && remaining_time[j] > 0) {
                min_val = remaining_time[j];
                shortest = j;
                check = true;
            }
        }

        if (check == false) {
            t++;
            continue;
        }

        remaining_time[shortest]--;

        min_val = remaining_time[shortest];
        if (min_val == 0) {
            min_val = _INT_MAX_;
        }

        if (remaining_time[shortest] == 0) {
            complete++;

            wt[shortest] = t + 1 - proc[shortest].arrival_time - proc[shortest].burst_time;

            if (wt[shortest] < 0) {
                wt[shortest] = 0;
            }
        }

        t++;
    }
}


void findTurnAroundTime(struct Process proc[], int n, int wt[], int tat[]) {
	int i;
    for ( i = 0; i < n; i++) {
        tat[i] = proc[i].burst_time + wt[i];
    }
}


void findAverageTime(struct Process proc[], int n) {
    int wt[n], tat[n];

    findWaitingTime(proc, n, wt);

    findTurnAroundTime(proc, n, wt, tat);

    int total_wt = 0, total_tat = 0;
    int i;
    for ( i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }

    float average_wt = (float)total_wt / n;
    float average_tat = (float)total_tat / n;

    printf("Average Waiting Time: %.2f\n", average_wt);
    printf("Average Turnaround Time: %.2f\n", average_tat);
}

int main() {
    struct Process proc[] = { {1, 0, 5}, {2, 1, 3}, {3, 2, 3}, {4, 4, 1} };
    int n = sizeof(proc) / sizeof(proc[0]);

    findAverageTime(proc, n);

    return 0;
}
